<% include ./partials/header %>
<body>
<script>
//var AlternateRowColorState=false;
window.onload = function () {
    ListenToMongo();
}

function displayTime() {
    var str = "";

    var currentTime = new Date()
    var hours = currentTime.getHours()
    var minutes = currentTime.getMinutes()
    var seconds = currentTime.getSeconds()

    if (minutes < 10) {
        minutes = "0" + minutes
    }
    if (seconds < 10) {
        seconds = "0" + seconds
    }
    str += hours + ":" + minutes + ":" + seconds + " ";
    if(hours > 11){
        str += "PM"
    } else {
        str += "AM"
    }
    return str;
}
function getcolorbackground(command)
{
     var background;
     
     if (command=="insert") return "<div style=\"background-color: #55FF66;\">";
     if (command=="delete") return "<div style=\"background-color: #FF6666;\">";
     if (command=="update") return "<div style=\"background-color: #F3EEDD;\">";
}
function MongoCommand(command)
{
          $.ajax({
            url: "/changestreams/" + command,
            method: 'POST',
            processData: false
            
            }).done(function(data)
            {  
                $('#ResultsGrid').append(getcolorbackground(command) + displayTime() + ' ' + data + '</div>');
            })
            .fail(function (err)
            {
              console.log("fail=" + JSON.stringify(err));
              $('#StatusMessage').html('Error inserting data : ' + err.responseText);
           
            });

}
function set(control,state)
{
   document.getElementById(control).style.display=state; 
    //document.getElementById(control). = state;
}
function ListenToMongo()
{
    var lastResponseLength = false;
    $('#ResultsGrid').empty();
    $('#ResultsGrid').append('<div><p><b>' + displayTime() + ' Opening stream...</b></p></div>');

    var oReq = new XMLHttpRequest();
    oReq.addEventListener("error", function(e) {
  $('#ResultsGrid').append('<div>Error : ' + JSON.stringify(e) + '</div>');
});
    oReq.onreadystatechange = function(doc)
    {
       
        if (this.readyState >= 3) 
        {

            if (this.responseText.length==0)
            {
                $('#ResultsGrid').append('<div>' + displayTime() + ' Ended stream</div>');
            }
            else{
                //Each event comes with all the changes so we should only show the new stuff
                var progressResponse;
                var response = this.responseText;
                if(lastResponseLength === false)
                {
                    progressResponse = response;
                    lastResponseLength = response.length;
                }
                else
                {
                    progressResponse = response.substring(lastResponseLength);
                    lastResponseLength = response.length;
                }

                $('#ResultsGrid').append('<div>' + displayTime() + ' Change Stream Event Response:<br><br> ' + progressResponse + '</div><br>');
                
            }
        }
        
       
    }
    oReq.open("get", "/ChangeStreams/poll", true);
    oReq.setRequestHeader('Cache-Control', 'no-cache');
    oReq.setRequestHeader( 'pragma', 'no-cache' );
    oReq.send();
  
}
</script>

<nav class="navbar navbar-inverse">
  <div class="container">
    <div class="navbar-header">
        <a class="navbar-brand" href="#"><img class="MongoImage" src="images/mongodb_logo3.png"></a>
    </div>
  </div>
</nav>

  <div class="container">  
  <div class="row">

    <% var active='changestreams'; %>
    <% include ./partials/sidebar %>

      <div class="col-sm-9 col-md-9 col-lg-9">
        <div class="content">
        <div class="hero-group">
            <h2>Tracking Data Changes</h2>
            <p>Some applications want to take action based on changes to data.  The concept is known as change data capture and support for change data capture within MongoDB arises from a feature called Change Streams.</p>
            <p>Change streams allow applications to access real-time data changes without the complexity and risk of tailing the oplog. Applications can use change streams to subscribe to all data changes on a collection and immediately react to them.</p>
            <p>Ready to check out Change Streams?  In this example you will open a stream to a collection called, "Inventory".  To keep things simple once you start listening to changes you can insert, update and remove documents in this collection.</p>
         
        </div>

        </div> <!--content-->
         <div class="content">
            <div class="panel panel-primary">
            <div class="panel-heading">Actions</div>
            <div class="panel-body">
            <div class="btn-group">
                <button type="button" class="btn" style="background-color: #55FF66;" id="MyInsert" onclick="MongoCommand('insert')">Insert document</button>
            </div>
            <div class="btn-group">
                <button type="button" class="btn" style="background-color: #F3EEDD;" id="MyUpdate" onclick="MongoCommand('update')">Update document</button>
            </div>
            <div class="btn-group">
                <button type="button" class="btn" style="background-color: #FF6666;" id="MyDelete" onclick="MongoCommand('delete')">Delete document</button>
            </div>
        </div>
        </div>
        </div>
         
            <div class="panel panel-info">
            <div class="panel-heading">Stream Status</div>
            <div class="panel-body scrollable-panel">
                <div id="ResultsGrid" ></div>
            </div>
            </div>
            </div>
        </div> <!--content-->
      </div> <!--colsm-->

    </div><!-- row -->
    </div> <!--container-->
  </body>
  </html>